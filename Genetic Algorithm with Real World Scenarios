# GA with Power interruption and Battery nonlinear charging

import numpy as np
import pandas as pd
import networkx as nx
import random
from scipy.optimize import minimize
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

# Parameters
num_ev = 75
num_stations = 6
charging_rates = [50, 50, 50, 60, 60, 150]
battery_capacities = np.random.randint(20, 100, num_ev)
desired_soc = np.random.uniform(0.8, 0.9, num_ev) * battery_capacities
remaining_battery = np.random.uniform(0.2, 0.3, num_ev) * battery_capacities
max_power_limits = [1000, 800, 900, 1200, 1100, 1000]

# Create a square grid road network
G = nx.grid_2d_graph(10, 5)

for (u, v) in G.edges():
    G[u][v]['distance'] = random.uniform(0.34, 0.38)

# Assign random road speeds to edges (km/h)
for (u, v) in G.edges():
    G[u][v]['speed'] = random.randint(50, 70)

ev_location = [random.choice(list(G.nodes())) for _ in range(num_ev)]
station_locations = [(4, 1), (3, 2), (4, 2), (8, 1), (8, 3), (7, 3)]


# Genetic Algorithm parameters
population_size = 50
generations = 300
crossover_rate = 0.9
mutation_rate = 0.01

# Power fluctuation parameters
fluctuation_probability = 0.20 # 10% chance of power fluctuation
fluctuation_impact = 0.25  # Charging rate reduced to 50% during fluctuation
fluctuation_duration = 1  # Duration of fluctuation in time units (e.g., hours)


# Function to initialize the population with diverse station assignments
def initialize_population(population_size, num_stations, num_ev):
    # Create a diverse population with different station assignments for each EV
    population = []
    for _ in range(population_size):
        # Ensure a diverse set of station assignments
        chromosome = [random.randint(0, num_stations - 1) for _ in range(num_ev)]
        population.append(chromosome)
    return population

# Function to evaluate the fitness of individuals in the population
def calculate_fitness(chromosomes):
    fitness_values_ga = []
    for chromosome in chromosomes:
        total_charging_time, total_travel_time, total_waiting_time = objective_function(chromosome)
        # Add penalty if too many EVs are assigned to the same station
        station_counts = np.bincount(chromosome, minlength=num_stations)
        station_penalty = sum([count**2 for count in station_counts if count > num_ev / num_stations])  # Penalize overcrowded stations
        fitness_values_ga.append(1 / (total_charging_time + total_travel_time + total_waiting_time + station_penalty))  # Invert for maximization
    return fitness_values_ga

# Function for tournament selection
def tournament_selection(chromosomes, fitness_values_ga, tournament_size):
    selected_parents = []
    for _ in range(len(chromosomes)):
        tournament_indices = random.sample(range(len(chromosomes)), tournament_size)
        tournament_fitness = [fitness_values_ga[i] for i in tournament_indices]
        selected_parents.append(chromosomes[tournament_indices[np.argmax(tournament_fitness)]])
    return selected_parents

# Function for crossover (two-point crossover)
def crossover(parent1, parent2):
    crossover_points = sorted(random.sample(range(len(parent1)), 2))
    child = parent1[:crossover_points[0]] + parent2[crossover_points[0]:crossover_points[1]] + parent1[crossover_points[1]:]
    return child

# Function for mutation (randomly change one gene)
def mutate(chromosome, mutation_rate, num_stations):
    mutated_chromosome = chromosome.copy()
    for i in range(len(chromosome)):
        if random.random() < mutation_rate:
            # Choose a different station than the current one
            available_stations = list(set(range(num_stations)) - {chromosome[i]})
            mutated_chromosome[i] = random.choice(available_stations)
    return mutated_chromosome

# New Objective function to minimize (total charging time, total travel time, and total waiting time of EVs)
#def objective_function(charging_schedule):
#    total_charging_time, total_travel_time, total_waiting_time, _ = calculate_total_charging_time(charging_schedule)
#    return total_charging_time, total_travel_time, total_waiting_time
# Adjusted objective function to include power fluctuation impact
def objective_function(charging_schedule):
    total_charging_time, total_travel_time, total_waiting_time, _ = calculate_total_charging_time(charging_schedule)
    return total_charging_time, total_travel_time, total_waiting_time

# Function for nonlinear charging model (e.g., exponential decay model)
def nonlinear_charging_model(soc, max_charging_power, alpha=0.05):
    return max_charging_power * np.exp(-alpha * soc)

# Update `calculate_total_charging_time` to use nonlinear charging model
# Modified `calculate_total_charging_time` function to incorporate power fluctuation constraint
def calculate_total_charging_time(charging_schedule):
    charging_queues = [[] for _ in range(num_stations)]
    total_charging_time = 0
    total_travel_time = 0
    total_waiting_time = 0
    data_records = []

    for ev_index, station_index in enumerate(charging_schedule):
        ev_location_x, ev_location_y = ev_location[ev_index]
        station_index = min(max(station_index, 0), num_stations - 1)
        station_x, station_y = station_locations[station_index]

        # Calculate distance to the station and travel time
        distance_to_station = nx.shortest_path_length(
            G, source=(ev_location_x, ev_location_y), target=(station_x, station_y), weight='distance'
        )
        average_speed = np.mean([G[u][v]['speed'] for (u, v) in G.edges()])
        travel_time = distance_to_station / average_speed

        # Get EV's remaining battery and desired SOC
        remaining_energy = remaining_battery[ev_index]
        target_energy = desired_soc[ev_index]
        battery_capacity = battery_capacities[ev_index]

        # Get the queue for the assigned station
        charging_queue = charging_queues[station_index]

        # Calculate arrival time based on travel time
        arrival_time = total_travel_time + travel_time

        # Determine the start time for charging based on the queue
        if charging_queue:
            last_ev = charging_queue[-1]
            waiting_time = last_ev[2] - arrival_time  # Calculate waiting time based on last EV's charging end time
            if waiting_time < 0:
                waiting_time = 0  # No wait if EV arrives after the last EV finishes charging
        else:
            waiting_time = 0  # No waiting if the queue is empty

        # Calculate charging time using the nonlinear charging model
        initial_soc = remaining_energy / battery_capacity
        final_soc = target_energy / battery_capacity
        charging_power = charging_rates[station_index]

        # Incorporate power fluctuation based on a random event
        power_fluctuation_occurred = random.random() < fluctuation_probability
        if power_fluctuation_occurred:
            charging_power *= fluctuation_impact  # Reduce charging power due to fluctuation
            fluctuation_duration_penalty = fluctuation_duration  # Add penalty duration due to fluctuation
        else:
            fluctuation_duration_penalty = 0  # No penalty if fluctuation does not occur

        # Calculate charging time considering the reduced power during fluctuation
        soc_range = np.linspace(initial_soc, final_soc, 100)  # SOC values from initial to final
        charging_time = 0
        for soc in soc_range:
            nonlinear_power = nonlinear_charging_model(soc, charging_power)
            charging_time_step = (battery_capacity * (final_soc - initial_soc)) / (len(soc_range) * nonlinear_power)
            charging_time += charging_time_step

        # Update waiting time and queue with EV's new data
        total_charging_time += charging_time
        total_travel_time += travel_time
        total_waiting_time += waiting_time

        # Append this EV's data to the station queue
        charging_queue.append((ev_index, distance_to_station, arrival_time + waiting_time + charging_time + fluctuation_duration_penalty, charging_time))

        # Collect data for DataFrame
        data_records.append({
            'EV Index': ev_index,
            'Charging Time': charging_time,
            'Remaining Battery': remaining_energy,
            'Desired SOC': target_energy,
            'Charging Rate': charging_power,
            'Waiting Time': waiting_time,
            'Distance from Station': distance_to_station,
            'Travel Time': travel_time,
            'Station Index': station_index,
            'Battery Capacity': battery_capacity,
            'Power Fluctuation': power_fluctuation_occurred,
            'Fluctuation Duration Penalty': fluctuation_duration_penalty,
            'Fluctuated Charging Rate': charging_power
        })

    # Create a DataFrame from collected data
    df = pd.DataFrame(data_records)

    # Calculate total travel time and total waiting time
    total_travel_time = df['Travel Time'].sum()
    total_waiting_time = df['Waiting Time'].sum()

    return total_charging_time, total_travel_time, total_waiting_time, df



# Define is_non_dominated function
def is_non_dominated(candidate_charging_time, candidate_waiting_time, candidate_traveling_time, pareto_set_ga):
    for solution in pareto_set_ga:
        # Compare the candidate solution with each solution in the Pareto set
        if (candidate_charging_time >= solution[0] and
            candidate_waiting_time >= solution[1] and
            candidate_traveling_time >= solution[2]):
            # If the candidate solution is worse in all objectives, it is dominated
            return False
    # If the candidate solution is not dominated by any existing solution, it is non-dominated
    return True

# Genetic Algorithm
def genetic_algorithm(population_size, generations, crossover_rate, mutation_rate, num_stations, num_ev):
    population = initialize_population(population_size, num_stations, num_ev)
    fitness_history = []  # To store the fitness values over generations
    pareto_set_ga = []  # To store non-dominated solutions
    final_best_solution_ga = None  # To track the final best solution
    final_best_objective = float('inf')  # Initialize final best objective value

    for generation in range(generations):
        fitness_values_ga = calculate_fitness(population)
        fitness_history.append(1 / max(fitness_values_ga))  # Store the maximum fitness value of the generation

        selected_parents = tournament_selection(population, fitness_values_ga, tournament_size=5)

        next_generation = []

        # Crossover and Mutation
        for i in range(0, len(selected_parents), 2):
            parent1 = selected_parents[i]
            parent2 = selected_parents[i + 1]

            if random.random() < crossover_rate:
                child1 = crossover(parent1, parent2)
                child2 = crossover(parent2, parent1)
            else:
                child1, child2 = parent1, parent2

            child1 = mutate(child1, mutation_rate, num_stations)
            child2 = mutate(child2, mutation_rate, num_stations)

            next_generation.extend([child1, child2])

        population = next_generation

        # Calculate objective values for each solution in the population
        objective_values = [objective_function(chromosome) for chromosome in population]

        # Iterate through each solution to check for non-dominance and update Pareto set
        for charging_time, waiting_time, traveling_time in objective_values:
            if is_non_dominated(charging_time, waiting_time, traveling_time, pareto_set_ga):
                pareto_set_ga.append((charging_time, waiting_time, traveling_time))

                # Update final best solution if applicable
                objective_sum = charging_time + waiting_time + traveling_time
                if objective_sum < final_best_objective:
                    final_best_solution_ga = (charging_time, waiting_time, traveling_time)
                    final_best_objective = objective_sum

    # Plot the fitness function over generations
    plt.plot(range(generations), fitness_history, color='purple')
    plt.xlabel('Generation')
    plt.ylabel('Fitness')
    plt.title('Fitness Function Over Generations')
    plt.show()


    ###fitness_values_pso = [x + 400 for x in fitness_values]
    #fitness_values_pso = [x + 100 for x in fitness_values]
    # Plot the fitness function over generations
    plt.plot(range(generations), fitness_history, color='purple', label='Fitness - GA')
    ###plt.plot(range(generations), fitness_values_pso, color='blue', linestyle='dotted',label='Fitness - PSO')
    plt.xlabel('Generation')
    plt.ylabel('Fitness')
    plt.title('Fitness Function Over Generations')
    plt.show()
    #ax.legend()
    #ax.legend(loc='upper left', fontsize = 20)

    # Convert fitness history to a DataFrame
    fitness_df = pd.DataFrame({'Generation': range(generations), 'Fitness': fitness_history})
    # Save fitness history to a CSV file
    fitness_df.to_csv('fitness_history_ga3.csv', index=False)

    # Plot the Pareto map
    fig = plt.figure(figsize=(10, 8))
    ax = fig.add_subplot(111, projection='3d')
    # Convert Pareto set to NumPy array for plotting
    pareto_set_array = np.array(pareto_set_ga)
    # Plot Pareto set
    ax.scatter(pareto_set_array[:, 0], pareto_set_array[:, 1], pareto_set_array[:, 2], c='b', marker='o', label='Pareto Front - GA')
    # Plot Pareto front solutions
    pareto_charging_times = [solution[0] for solution in pareto_set_ga]
    pareto_waiting_times = [solution[1] for solution in pareto_set_ga]
    pareto_traveling_times = [solution[2] for solution in pareto_set_ga]
    ax.scatter(pareto_charging_times, pareto_waiting_times, pareto_traveling_times, c='y', marker='^', label='Pareto Front - PSO')
    # Plot final best solution
    #ax.scatter(final_best_solution_ga[0], final_best_solution_ga[1], final_best_solution_ga[2], c='b', marker='*', s=200, label='Final Best Solution')
    #ax.scatter(final_best_solution[0], final_best_solution[1], final_best_solution[2], c='y', marker='*', s=200, label='Final Best Solution')
    ax.scatter(final_best_solution_ga[0], final_best_solution_ga[1], final_best_solution_ga[2], c='b', marker='*', s=200, label='Best Solution - GA')
    ###ax.scatter(final_best_solution[0], final_best_solution[1], final_best_solution[2], c='y', marker='*', s=200, label='Best Solution - PSO')


    # Plot utopian point
    utopian_point_ga = (min(pareto_set_array[:, 0]), min(pareto_set_array[:, 1]), min(pareto_set_array[:, 2]))
    #ax.scatter(*utopian_point_ga, c='g', marker='o', s=200, label='Utopian Point')
    #ax.scatter(*utopian_point_pso, c='y', marker='o', s=200, label='Utopian Point')
    # Plot labels and legend
    ax.set_xlabel('Total Charging Time')
    ax.set_ylabel('Total Waiting Time')
    ax.set_zlabel('Total Traveling Time')
    ax.set_title('Pareto Map')
    ax.legend()
    plt.show()


        # Create DataFrame for Pareto map
    pareto_map_df = pd.DataFrame({
        'Charging Time': pareto_set_array[:, 0],
        'Waiting Time': pareto_set_array[:, 1],
        'Traveling Time': pareto_set_array[:, 2]
    })

    # Save Pareto map to CSV
    pareto_map_df.to_csv('pareto_map_ga3.csv', index=False)

    # Create DataFrame for utopian point
    utopian_point_df = pd.DataFrame({
        'Charging Time': [utopian_point_ga[0]],
        'Waiting Time': [utopian_point_ga[1]],
        'Traveling Time': [utopian_point_ga[2]]
    })

    # Save utopian point to CSV
    utopian_point_df.to_csv('utopian_point_ga3.csv', index=False)

    # Create DataFrame for best solution
    best_solution_df = pd.DataFrame({
        'Charging Time': [final_best_solution_ga[0]],
        'Waiting Time': [final_best_solution_ga[1]],
        'Traveling Time': [final_best_solution_ga[2]]
    })

    # Save best solution to CSV
    best_solution_df.to_csv('best_solution_ga3.csv', index=False)


    # Return the final best solution and its fitness
    ##return final_best_solution
    # Final evaluation
    best_solution, best_fitness, results_df = evaluate_best_solution(population)
    return best_solution, best_fitness, results_df

def evaluate_best_solution(population):
    final_fitness_values = calculate_fitness(population)
    best_solution_index = np.argmax(final_fitness_values)
    best_solution = population[best_solution_index]
#    total_charging_time, total_travel_time, results_df = calculate_total_charging_time(best_solution)
    total_charging_time, total_travel_time, _, results_df = calculate_total_charging_time(best_solution)
    best_fitness = total_charging_time + total_travel_time

    # Return the best solution and its fitness
    return best_solution, best_fitness, results_df

# Run the Genetic Algorithm

# Run the Genetic Algorithm with updated parameters
best_solution, best_fitness, results_df = genetic_algorithm(
    population_size, generations, crossover_rate, mutation_rate, num_stations, num_ev
)
##best_solution = genetic_algorithm(population_size, generations, crossover_rate, mutation_rate, num_stations, num_ev)
###best_solution, best_fitness, results_df = genetic_algorithm(population_size, generations, crossover_rate, mutation_rate, num_stations, num_ev)

average_total_times = np.mean(results_df['Charging Time'] + results_df['Waiting Time'] + results_df['Travel Time'])


# Print the results
print("Best Charging Schedule (Station Assignments):", best_solution)
print("Best Fitness (1 / Total Charging Time):", best_fitness)
print("Total Charging Time for the Best Solution:", 1 / best_fitness)
print("Total Charging Time:", sum(results_df['Charging Time']))
print("Total Waiting Time:", sum(results_df['Waiting Time']))
print("Total Travel Time:", sum(results_df['Travel Time']))
print("Total Time:", sum(results_df['Charging Time'] +results_df['Waiting Time'] +results_df['Travel Time']))

# Print the results DataFrame
print("Results DataFrame:")
print(results_df)

# Save results DataFrame to a CSV file
results_df.to_csv('optimized_results_ga3.csv', index=False)

ev_indices = range(num_ev)

bar_width = 0.35
fig, ax = plt.subplots(figsize=(28, 10))
bar1 = ax.bar(results_df['EV Index'] + 1, results_df['Charging Time'], width=bar_width,  label='Charging Time', color='blue')
bar2 = ax.bar(results_df['EV Index'] + 1, results_df['Waiting Time'], width=bar_width,  label='Waiting Time', color='skyblue', bottom=results_df['Charging Time'])
bar3 = ax.bar(results_df['EV Index'] + 1, results_df['Travel Time'], width=bar_width, bottom=results_df['Charging Time'] + results_df['Waiting Time'], label='Travel Time', color='purple')
for label in (ax.get_xticklabels() + ax.get_yticklabels()):
    label.set_fontsize(20)
plt.ylim(0, 4.0)
ax.set_xlabel('EV Index', fontsize = 20)
ax.set_ylabel('Time (Hours)', fontsize = 20)
ax.set_title('Charging, Waiting and Total Time for Each EV with Combined Average Time - GA', fontsize = 20)
ax.legend(loc='upper left', fontsize = 20)

bar_width = 0.35
fig, ax = plt.subplots(figsize=(28, 10))
plt.hlines(y=np.mean(results_df['Charging Time'] + results_df['Waiting Time'] + results_df['Travel Time']), xmin=0, xmax=num_ev, colors='purple', linestyles='-', lw=2, label='Average Time for EVs to Charge')
average_line = ax.plot(results_df['EV Index'] + 1, results_df['Charging Time'] + results_df['Waiting Time'] + results_df['Travel Time'], color='purple', label='Total Time Consumed')
#plt.hlines(y=np.mean(final_results_df['Charging Time'] + final_results_df['Waiting Time'] + final_results_df['Travel Time']), xmin=0, xmax=num_ev, colors='blue', linestyles='dotted', lw=2, label='Average Time for EVs to Charge') # PSO
#average_line1 = ax.plot(final_results_df['EV Index'] + 1, final_results_df['Charging Time'] + final_results_df['Waiting Time'] + final_results_df['Travel Time'], color='blue', linestyles='dotted', label='Total Time Consumed') # PSO
for label in (ax.get_xticklabels() + ax.get_yticklabels()):
    label.set_fontsize(20)
#plt.ylim(0, 20.0)
ax.set_xlabel('EV Index', fontsize = 20)
ax.set_ylabel('Time (Hours)', fontsize = 20)
ax.set_title('Charging, Waiting and Total Time for Each EV with Combined Average Time - GA', fontsize = 20)
ax.legend(loc='upper left', fontsize = 20)


# Calculate the number of EVs assigned to each charging point
evs_per_station_ga = [0] * num_stations
for station_index in best_solution:
    evs_per_station_ga[station_index] += 1

# Create a DataFrame from the statistics
stats_df = pd.DataFrame({
    'Charging Point Index': range(1, num_stations + 1),
    'Number of EVs Assigned': evs_per_station_ga
})

# Save the DataFrame to a CSV file
stats_df.to_csv('charging_point_stats_ga3.csv', index=False)

# Plotting the bar graph
plt.figure(figsize=(10, 6))
plt.bar(range(num_stations), evs_per_station_ga, color='skyblue')
plt.xlabel('Charging Point Index')
plt.ylabel('Number of EVs Assigned')
plt.title('Number of EVs Assigned to Each Charging Point')
plt.xticks(range(num_stations), range(1, num_stations + 1))
plt.grid(axis='y')
plt.show()

