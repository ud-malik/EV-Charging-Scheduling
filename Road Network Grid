import numpy as np
import pandas as pd
import networkx as nx
import random
from scipy.optimize import minimize
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

# Parameters
num_ev = 30
num_stations = 6
#charging_rates = [120, 120, 120, 100, 100, 60, 60]
charging_rates = [50, 50, 50, 60, 60, 150]
battery_capacities = np.random.randint(20, 100, num_ev)
desired_soc = np.random.uniform(0.8, 0.9, num_ev) * battery_capacities
remaining_battery = np.random.uniform(0.2, 0.3, num_ev) * battery_capacities
max_power_limits = [1000, 800, 900, 1200, 1100, 1000, 1000]

# Create a square grid road network
G = nx.grid_2d_graph(10, 5)

for (u, v) in G.edges():
    G[u][v]['distance'] = random.uniform(0.34, 0.38)

# Assign random road speeds to edges (km/h)
for (u, v) in G.edges():
    G[u][v]['speed'] = random.randint(50, 70)

ev_location = [random.choice(list(G.nodes())) for _ in range(num_ev)]
#station_locations = [(2, 1), (8, 8), (3, 7), (2, 2), (8, 9), (4, 7), (1, 2)]

station_locations = [(4, 1), (3, 2), (4, 2), (8, 1), (8, 3), (7, 3)]

plt.figure(figsize=(8, 4))
pos = {node: node for node in G.nodes()}
nx.draw(G, pos, with_labels=False, node_size=30, node_color='grey', font_size=6)

ev_x, ev_y = zip(*ev_location)
plt.scatter(ev_x, ev_y, c='red', marker='o', s=100)
for i, (x, y) in enumerate(zip(ev_x, ev_y)):
    plt.annotate(f'EV {i + 1}', (x, y), fontsize=10, ha='center', va='bottom')

charging_station_x, charging_station_y = zip(*station_locations)
plt.scatter(charging_station_x, charging_station_y, c='blue', marker='s', s=200)
for i, (x, y) in enumerate(zip(charging_station_x, charging_station_y)):
    plt.annotate(f'Station {i + 1}', (x, y), fontsize=10, ha='center', va='bottom')

# Display the plots
plt.xlabel('X-coordinate')
plt.ylabel('Y-coordinate')
plt.title('Road Network with Charging Stations and EV Locations')
plt.grid(True)

plt.show()
